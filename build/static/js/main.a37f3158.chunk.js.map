{"version":3,"sources":["Notifications/Notifications.tsx","SocialMediaButtons.tsx","Footer/Footer.tsx","useCopyableLogo.tsx","Main/Main.tsx","Roadmap/Roadmap.tsx","Showcase/ShowcaseItem.tsx","Showcase/Showcase.tsx","SectionMetaNinjaz/SectionMetaNinjaz.tsx","wallet/checkIfWalletIsConnected.ts","Notifications/addOrReplaceNotification.tsx","wallet/getContractThroughEthereumProvider.ts","wallet/getExplorerHref.ts","wallet/askContractToMintNFT.ts","wallet/connectWallet.ts","wallet/getApiConnectedContract.ts","wallet/getRandomIDNotMintedNFT.ts","wallet/mintNFT.ts","utils/generateUUID.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NotificationType","SocialMediaButtons","isFooter","className","href","Footer","footerRef","useRef","containerRef","useEffect","current","addEventListener","e","selection","document","getSelection","range","getRangeAt","contents","cloneContents","copiedText","childNodes","values","node","nodeType","Node","TEXT_NODE","textContent","ELEMENT_NODE","nodeName","n","dataset","copyText","clipboardData","setData","preventDefault","useCopyableLogo","ref","src","Main","mintNFT","MintPendingNotificationContent","explorerHref","target","MintSuccessfulNotificationContent","ErrorNotificationContent","Notification","content","notification","setNotifications","type","MintPending","MintSuccessful","onClick","prevState","filter","item","id","Notifications","notifications","map","ProgressBar","children","Roadmap","ShowcaseItem","imgPath","alt","Showcase","animationRef","showcaseRef","showcaseOffsetRef","top","updateAnimationsCurrentTime","isMobileVersion","Math","max","documentElement","clientWidth","window","innerWidth","elem","box","getBoundingClientRect","body","docEl","scrollTop","pageYOffset","scrollLeft","pageXOffset","clientTop","clientLeft","left","round","getCoords","scrollY","posYAtWhichShowcaseGetsIntoViewport","innerHeight","currentTime","currentTimeForReverted","forEach","animation","reverted","passive","removeEventListener","SectionMetaNinjaz","checkIfWalletIsConnected","a","setCurrentAccount","ethereum","console","error","request","method","accounts","length","addOrReplaceNotification","newNotification","replaced","newState","push","getContractThroughEthereumProvider","process","REACT_APP_CONTRACT_ADDRESS","REACT_APP_ENV","provider","ethers","providers","Web3Provider","signer","getSigner","abi","SilhouettePunksTest","SilhouettePunksProd","Contract","getExplorerHref","transactionHash","askContractToMintNFT","tokenID","notificationID","connectedContract","Error","overrides","value","utils","parseEther","mint","nftTxn","hash","wait","connectWallet","undefined","getApiConnectedContract","REACT_APP_API_URL","createAlchemyWeb3","eth","getRandomIDNotMintedNFT","apiContract","tokensLeft","Set","Array","keys","getPastEvents","_from","fromBlock","then","events","event","delete","returnValues","tokenId","size","maxIncluded","setIdx","floor","random","currentAccount","acc","replace","c","crypto","getRandomValues","Uint8Array","toString","result","nonEmptyTokenID","trim","test","parseInt","App","useState","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a37f3158.chunk.js","sourcesContent":["import { FC, ReactNode } from \"react\";\nimport \"./Notifications.css\";\nimport { NotificationsSetter } from \"./NotificationsSetter\";\n\nexport enum NotificationType {\n  MintPending = 0,\n  MintSuccessful = 1,\n  Error = 2,\n}\n\ntype N = {\n  id: string;\n};\n\ninterface SuccessNotification extends N {\n  type: NotificationType.MintSuccessful;\n  explorerHref: string;\n}\n\ninterface PendingNotification extends N {\n  type: NotificationType.MintPending;\n  explorerHref?: string;\n}\n\ninterface ErrorNotification extends N {\n  type: NotificationType.Error;\n}\n\nexport type Notification =\n  | SuccessNotification\n  | PendingNotification\n  | ErrorNotification;\n\nconst MintPendingNotificationContent: FC<PendingNotification> = ({\n  explorerHref,\n}) => {\n  return (\n    <>\n      <div className=\"notification-icon\">\n        <img src=\"/icons/pendingIcon.svg\" />\n        <div className=\"spinner\" />\n      </div>\n      <div className=\"notification-text\">\n        <p>Mint Pending...</p>\n        <p>\n          {explorerHref ? (\n            <a href={explorerHref} target=\"_blank\">\n              View on Explorer\n            </a>\n          ) : null}\n        </p>\n      </div>\n    </>\n  );\n};\n\nconst MintSuccessfulNotificationContent: FC<SuccessNotification> = ({\n  explorerHref,\n}) => {\n  return (\n    <>\n      <div className=\"notification-icon\">\n        <img src=\"/icons/completeIconWhiteInside.svg\" />\n      </div>\n      <div className=\"notification-text\">\n        <p>Mint Successful!</p>\n        <p>\n          <a href={explorerHref} target=\"_blank\">\n            View on Explorer\n          </a>\n        </p>\n      </div>\n    </>\n  );\n};\n\nconst ErrorNotificationContent: FC<ErrorNotification> = () => {\n  return (\n    <>\n      <div className=\"notification-icon exclamation-mark\">\n        <img src=\"/icons/errorIcon.svg\" />\n      </div>\n      <div className=\"notification-text\">\n        <p>We're sorry, an error has occurred.</p>\n      </div>\n    </>\n  );\n};\n\nconst Notification = ({\n  notification,\n  setNotifications,\n}: {\n  notification: SuccessNotification | PendingNotification | ErrorNotification;\n  setNotifications: NotificationsSetter;\n}) => {\n  let content: ReactNode;\n  switch (notification.type) {\n    case NotificationType.MintPending:\n      content = <MintPendingNotificationContent {...notification} />;\n      break;\n    case NotificationType.MintSuccessful:\n      content = <MintSuccessfulNotificationContent {...notification} />;\n      break;\n    default:\n      content = <ErrorNotificationContent {...notification} />;\n      break;\n  }\n\n  return (\n    <div className=\"notification\">\n      <img\n        className=\"close-icon\"\n        src=\"/icons/closeIcon.svg\"\n        onClick={() => {\n          setNotifications((prevState) =>\n            prevState.filter((item) => item.id !== notification.id)\n          );\n        }}\n      />\n      {content}\n    </div>\n  );\n};\n\nexport const Notifications: FC<{\n  notifications: Notification[];\n  setNotifications: NotificationsSetter;\n}> = ({ setNotifications, notifications }) => {\n  return (\n    <div className=\"notifications\">\n      {notifications.map((notification) => (\n        <Notification\n          key={`${notification.type}-${notification.id}`}\n          setNotifications={setNotifications}\n          notification={notification}\n        />\n      ))}\n    </div>\n  );\n};\n","import React, { FC } from \"react\";\nimport \"./SocialMediaButtons.css\";\n\nexport const SocialMediaButtons: FC<{ isFooter?: boolean }> = ({\n  isFooter,\n}) => {\n  return (\n    <div className=\"socials\">\n      <a className=\"button\" href=\"//opensea.io/\">\n        Open Sea\n      </a>\n      <a className=\"button\" href=\"//twitter.com\">\n        Twitter\n      </a>\n      <a className=\"button\" href=\"//discord.com\">\n        Discord\n      </a>\n    </div>\n  );\n};\n","import \"./Footer.css\";\nimport React, { useRef } from \"react\";\nimport { SocialMediaButtons } from \"../SocialMediaButtons\";\nimport { useCopyableLogo } from \"../useCopyableLogo\";\n\nexport const Footer = () => {\n  const footerRef = useRef<HTMLElement>(null);\n  useCopyableLogo({ containerRef: footerRef });\n\n  return (\n    <>\n      <footer ref={footerRef}>\n        <img className=\"footer-img\" src=\"/META NINJAZheader2.png\" />\n        <div className=\"footer-content\">\n          <div className=\"footer-social\">\n            <SocialMediaButtons isFooter />\n          </div>\n        </div>\n      </footer>\n    </>\n  );\n};\n","import { MutableRefObject, useEffect } from \"react\";\n\nexport const useCopyableLogo = ({\n  containerRef,\n}: {\n  containerRef: MutableRefObject<HTMLElement | null>;\n}) => {\n  useEffect(() => {\n    (containerRef.current as HTMLElement).addEventListener(\"copy\", (e) => {\n      const selection = document.getSelection();\n      const range = selection?.getRangeAt(0);\n      const contents = range?.cloneContents();\n      let copiedText = \"\";\n\n      const childNodes =\n        contents?.childNodes.values() as IterableIterator<ChildNode>;\n      for (const node of childNodes) {\n        if (node.nodeType === Node.TEXT_NODE) {\n          copiedText += node.textContent;\n        } else if (\n          node.nodeType === Node.ELEMENT_NODE &&\n          node.nodeName === \"SPAN\"\n        ) {\n          const n: any = node;\n          if (n.dataset.copyText) {\n            copiedText += n.dataset.copyText;\n            continue;\n          }\n\n          copiedText += node.textContent;\n        }\n      }\n\n      e.clipboardData?.setData(\"text/plain\", copiedText);\n      e.preventDefault();\n    });\n  }, []);\n};\n","import \"./Main.css\";\nimport { useRef } from \"react\";\n\nexport const Main = ({\n  mintNFT,\n}: {\n  mintNFT: (arg: { tokenID: string }) => Promise<boolean>;\n}) => {\n  const tokenIDRef = useRef<HTMLInputElement>(null);\n\n  return (\n    <>\n      <div className=\"main-mn-container\">\n        <img className=\"main-mn\" src=\"/main.png\" />\n      </div>\n      <div className=\"main-oval filled\">Coming Soon!</div>\n      {/* <a\n        className=\"main-oval filled\"\n        onClick={() => {\n          return mintNFT({ tokenID: tokenIDRef.current?.value || \"\" });\n        }}\n      >\n        Mint Your Meta Ninjaz Now\n      </a>\n      <input\n        ref={tokenIDRef}\n        className=\"main-oval\"\n        placeholder=\"Quantity (max 50)\"\n        type=\"number\"\n      /> */}\n      <div className=\"minted\">\n        <div>{0 + \"/888 MINTED\"}</div>\n        <div>0.0888 ETH/each</div>\n      </div>\n    </>\n  );\n};\n","import \"./Roadmap.css\";\nimport { FC } from \"react\";\n\nconst ProgressBar: FC = ({ children }) => {\n  return <div className=\"progress-bar\">{children}</div>;\n};\n\nexport const Roadmap: FC = () => {\n  return (\n    <>\n      <h2 className=\"roadmap\">Roadmap</h2>\n      <div className=\"roadmap-item\">\n        <ProgressBar>1.18.2022</ProgressBar>\n        <span>888 Genesis Collection Mint </span>\n        <span className=\"in-progress\">In Progress</span>\n        <br />\n      </div>\n      <div className=\"roadmap-item-subtext\">\n        Genesis Ninjaz will have whitelist priority for full collection mint and\n        will recieve 33% of all in-game tokens earned\n      </div>\n      <div className=\"roadmap-item\">\n        <ProgressBar>2.01.2022</ProgressBar>\n        <span>8000 METANINJAZ Raid the Metaverse </span>\n        <span className=\"not-progress\">In Progress</span>\n      </div>\n      <div className=\"roadmap-item-subtext\">\n        Full collection launch will allow Meta Ninjaz Holders to have access to\n        game alpha to start collecting $RUN token, and community governance for\n        decisions around community rewards, token allocation, and merchandise.\n      </div>\n      <div className=\"roadmap-item\">\n        <ProgressBar>2.14.2022</ProgressBar>\n        <span>Community Tokenomics Vote </span>\n        <span className=\"not-progress\">In Progress</span>\n      </div>\n      <div className=\"roadmap-item-subtext\">\n        Community votes on Tokenmoics proposal for in-game token earnings. The\n        community will be allowed to pitch their own models if they disagree\n        with the model proposed by Meta Ninjaz Team\n      </div>\n      <div className=\"roadmap-item\">\n        <ProgressBar>Q2 2022</ProgressBar>\n        <span>Game Alpha Launches </span>\n        <span className=\"not-progress\">In Progress</span>\n      </div>\n      <div className=\"roadmap-item-subtext\">\n        Side scroller Meta Ninjaz game launches with leaderboard. $RUN tokens\n        are rewarded to top 50 players with the most distance covered weekly.\n        Genesis holders earn 33% of all tokens earned.\n      </div>\n      <div className=\"roadmap-item\">\n        <ProgressBar>Q2 2022</ProgressBar>\n        <span>Events, Merch, Game Development </span>\n        <span className=\"not-progress\">In Progress</span>\n      </div>\n      <div className=\"roadmap-item-subtext\">\n        $RUN utility enables community to vote on a variety of proposals for\n        further community development. In-game rewards including merch,\n        powerups, new skins are purchasable with $RUN token. V2 of Meta Ninjaz\n        launches\n      </div>\n    </>\n  );\n};\n","export const ShowcaseItem = ({ imgPath }: { imgPath: string }) => {\n  return <img className=\"showcase-img\" alt=\"Meta Ninja\" src={imgPath} />;\n};\n","import \"./Showcase.css\";\nimport \"./ShowcaseRow.css\";\nimport \"./ShowcaseItem.css\";\nimport { useEffect, useRef } from \"react\";\nimport { ShowcaseItem } from \"./ShowcaseItem\";\n\nfunction getCoords(elem: HTMLElement) {\n  // crossbrowser version\n  const box = elem.getBoundingClientRect();\n\n  const body = document.body;\n  const docEl = document.documentElement;\n\n  const scrollTop = window.pageYOffset || docEl.scrollTop || body.scrollTop;\n  const scrollLeft = window.pageXOffset || docEl.scrollLeft || body.scrollLeft;\n\n  const clientTop = docEl.clientTop || body.clientTop || 0;\n  const clientLeft = docEl.clientLeft || body.clientLeft || 0;\n\n  const top = box.top + scrollTop - clientTop;\n  const left = box.left + scrollLeft - clientLeft;\n\n  return { top: Math.round(top), left: Math.round(left) };\n}\n\nexport const Showcase = () => {\n  const animationRef = useRef<{ animation: Animation; reverted: boolean }[]>(\n    []\n  );\n  const showcaseRef = useRef<HTMLDivElement>(null);\n  const showcaseOffsetRef = useRef<{ top: number | null }>({ top: null });\n\n  const updateAnimationsCurrentTime = () => {\n    if (!showcaseRef.current || !animationRef.current) {\n      return;\n    }\n\n    const viewportWidth = Math.max(\n      document.documentElement.clientWidth || 0,\n      window.innerWidth || 0\n    );\n    const isMobileVersion = viewportWidth < 641;\n\n    if (showcaseOffsetRef.current.top === null) {\n      showcaseOffsetRef.current.top = getCoords(showcaseRef.current).top;\n    }\n\n    const scrollY = window.scrollY || window.pageYOffset;\n    const posYAtWhichShowcaseGetsIntoViewport =\n      showcaseOffsetRef.current.top + window.innerHeight;\n\n    let currentTime =\n      scrollY -\n      posYAtWhichShowcaseGetsIntoViewport +\n      (isMobileVersion ? 20000 : 13000);\n    if (currentTime < 0) {\n      currentTime = 0;\n    }\n\n    let currentTimeForReverted =\n      scrollY - posYAtWhichShowcaseGetsIntoViewport + 12500;\n    if (currentTimeForReverted < 0) {\n      currentTimeForReverted = 0;\n    }\n\n    animationRef.current.forEach(({ animation, reverted }) => {\n      animation.currentTime = reverted ? currentTimeForReverted : currentTime;\n    });\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", updateAnimationsCurrentTime, {\n      passive: true,\n    });\n    window.addEventListener(\"touchmove\", updateAnimationsCurrentTime, {\n      passive: true,\n    });\n\n    return () => {\n      window.removeEventListener(\"scroll\", updateAnimationsCurrentTime);\n      window.removeEventListener(\"touchmove\", updateAnimationsCurrentTime);\n    };\n  }, []);\n\n  return (\n    <div ref={showcaseRef} className=\"showcase\">\n      {/* <ShowcaseRow animationDataRef={animationRef} i={1} /> */}\n      <div className=\"showcase-row\">\n        <ShowcaseItem imgPath={\"/754.png\"} />\n        <ShowcaseItem imgPath={\"/368.png\"} />\n        <ShowcaseItem imgPath={\"/61.png\"} />\n        <ShowcaseItem imgPath={\"/946.png\"} />\n      </div>\n    </div>\n  );\n};\n","import \"./SectionMetaNinjaz.css\";\n\nexport const SectionMetaNinjaz = () => {\n  return (\n    <div className=\"section-meta-ninjaz\">\n      <h2>Meta Ninjaz</h2>\n      <div>\n        The MetaNinjaz is a randomly generated collection of 888 MetaNinjaz\n        Genesis pieces and 8000 MetaNinjaz roaming the blockchain.\n      </div>\n      <div>\n        Summoned to protect against a crippled Cyber-Tokyo, MetaNinjaz possess\n        p2e utility gaining $RUN token in a side scroller game.\n      </div>\n      <div>\n        $RUN will be the staple token for the MetaNinjaz community allowing for\n        governance, rewards, and merchandise.\n      </div>\n      <img src=\"/fire.gif\" />\n    </div>\n  );\n};\n","import { Account } from \"./Account\";\n\nexport const checkIfWalletIsConnected = async ({\n  setCurrentAccount,\n}: {\n  setCurrentAccount: (acc: Account) => void;\n}): Promise<boolean> => {\n  const { ethereum } = window;\n\n  if (!ethereum) {\n    console.error(\"Ethereum object doesn't exist!\");\n    return false;\n  }\n\n  /*\n   * Check if we're authorized to access the user's wallet\n   */\n  const accounts = await ethereum.request<Account[]>({\n    method: \"eth_accounts\",\n  });\n\n  /*\n   * User can have multiple authorized accounts, we grab the first one if its there!\n   */\n  if (accounts && accounts.length > 0) {\n    setCurrentAccount(accounts[0] as Account);\n    return true;\n  } else {\n    return false;\n  }\n};\n","import { Notification } from \"./Notifications\";\nimport { NotificationsSetter } from \"./NotificationsSetter\";\n\nexport const addOrReplaceNotification = ({\n  newNotification,\n  setNotifications,\n}: {\n  newNotification: Notification;\n  setNotifications: NotificationsSetter;\n}) => {\n  setNotifications((prevState: Notification[]) => {\n    let replaced = false;\n\n    const newState = prevState.map((item) => {\n      if (item.id !== newNotification.id) {\n        return item;\n      }\n\n      replaced = true;\n      return newNotification;\n    });\n\n    if (!replaced) {\n      newState.push(newNotification);\n    }\n    return newState;\n  });\n};\n","import { ethers } from \"ethers\";\nimport SilhouettePunksProd from \"../abi/prod/SilhouettePunks.json\";\nimport SilhouettePunksTest from \"../abi/test/SilhouettePunks.json\";\n\nexport const getContractThroughEthereumProvider =\n  async (): Promise<ethers.Contract | null> => {\n    const { REACT_APP_CONTRACT_ADDRESS, REACT_APP_ENV } = process.env;\n\n    if (!REACT_APP_CONTRACT_ADDRESS) {\n      console.error(\"incorrect REACT_APP_CONTRACT_ADDRESS value\", {\n        REACT_APP_CONTRACT_ADDRESS,\n      });\n      return null;\n    }\n\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.error(\"Ethereum object doesn't exist!\");\n        return null;\n      }\n\n      const provider = new ethers.providers.Web3Provider(ethereum as any);\n      const signer = provider.getSigner();\n\n      let abi: any;\n      if (REACT_APP_ENV === \"test\") {\n        abi = SilhouettePunksTest.abi;\n      } else if (REACT_APP_ENV === \"prod\") {\n        abi = SilhouettePunksProd.abi;\n      } else {\n        console.error(\"incorrect REACT_APP_ENV value\", { REACT_APP_ENV });\n        return null;\n      }\n\n      return new ethers.Contract(\n        REACT_APP_CONTRACT_ADDRESS as string,\n        abi,\n        signer\n      );\n    } catch (error) {\n      console.error(error);\n    }\n    return null;\n  };\n","export const getExplorerHref = ({\n  transactionHash,\n}: {\n  transactionHash: string;\n}) => {\n  const { REACT_APP_ENV } = process.env;\n\n  let hrefPrefix: any;\n  if (REACT_APP_ENV === \"test\") {\n    hrefPrefix = \"https://rinkeby.etherscan.io/tx/\";\n  } else if (REACT_APP_ENV === \"prod\") {\n    hrefPrefix = \"https://etherscan.io/tx/\";\n  } else {\n    console.error(\"incorrect REACT_APP_ENV value\", { REACT_APP_ENV });\n    return undefined;\n  }\n\n  return `${hrefPrefix}${transactionHash}`;\n};\n","import { ethers } from \"ethers\";\nimport { addOrReplaceNotification } from \"../Notifications/addOrReplaceNotification\";\nimport { NotificationType } from \"../Notifications/Notifications\";\nimport { NotificationsSetter } from \"../Notifications/NotificationsSetter\";\nimport { getContractThroughEthereumProvider } from \"./getContractThroughEthereumProvider\";\nimport { getExplorerHref } from \"./getExplorerHref\";\n\nexport const askContractToMintNFT = async ({\n  tokenID,\n  notificationID,\n  setNotifications,\n}: {\n  tokenID: number;\n  notificationID: string;\n  setNotifications: NotificationsSetter;\n}): Promise<boolean> => {\n  const connectedContract = await getContractThroughEthereumProvider();\n  if (connectedContract === null) {\n    addOrReplaceNotification({\n      newNotification: { type: NotificationType.Error, id: notificationID },\n      setNotifications,\n    });\n    return false;\n  }\n\n  try {\n    const overrides = {\n      value: ethers.utils.parseEther(\"0.02\"), // ether in this case MUST be a string\n    };\n\n    //  Going to pop wallet now to pay gas...\n    const nftTxn = await connectedContract.mint(tokenID, overrides);\n\n    const explorerHref = getExplorerHref({ transactionHash: nftTxn.hash });\n    if (!explorerHref) {\n      setNotifications([{ type: NotificationType.Error, id: notificationID }]);\n      return false;\n    }\n\n    addOrReplaceNotification({\n      newNotification: {\n        type: NotificationType.MintPending,\n        id: notificationID,\n        explorerHref,\n      },\n      setNotifications,\n    });\n\n    // Mining... please wait.\n    await nftTxn.wait();\n\n    addOrReplaceNotification({\n      newNotification: {\n        type: NotificationType.MintSuccessful,\n        id: notificationID,\n        explorerHref,\n      },\n      setNotifications,\n    });\n    return true;\n  } catch (error) {\n    addOrReplaceNotification({\n      newNotification: { type: NotificationType.Error, id: notificationID },\n      setNotifications,\n    });\n    console.error(error);\n  }\n\n  return false;\n};\n","import { Account } from \"./Account\";\n\nexport const connectWallet = async ({\n  setCurrentAccount,\n}: {\n  setCurrentAccount: (acc: Account) => void;\n}): Promise<string | undefined> => {\n  try {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.error(\"Ethereum object doesn't exist!\");\n      return undefined;\n    }\n\n    /*\n     * Fancy method to request access to account.\n     */\n    const accounts = await ethereum.request<Account[]>({\n      method: \"eth_requestAccounts\",\n    });\n\n    if (accounts && accounts.length > 0) {\n      setCurrentAccount(accounts[0] as Account);\n      return accounts[0];\n    }\n  } catch (error) {\n    console.error(error);\n  }\n\n  return undefined;\n};\n","import { createAlchemyWeb3 } from \"@alch/alchemy-web3\";\nimport SilhouettePunksProd from \"../abi/prod/SilhouettePunks.json\";\nimport SilhouettePunksTest from \"../abi/test/SilhouettePunks.json\";\n\nexport const getApiConnectedContract = () => {\n  const { REACT_APP_ENV, REACT_APP_API_URL, REACT_APP_CONTRACT_ADDRESS } =\n    process.env;\n\n  let abi: any;\n  if (REACT_APP_ENV === \"test\") {\n    abi = SilhouettePunksTest.abi;\n  } else if (REACT_APP_ENV === \"prod\") {\n    abi = SilhouettePunksProd.abi;\n  } else {\n    console.error(\"incorrect REACT_APP_ENV value\", { REACT_APP_ENV });\n    return null;\n  }\n\n  const web3 = createAlchemyWeb3(REACT_APP_API_URL as string);\n\n  const contract = new web3.eth.Contract(\n    abi,\n    REACT_APP_CONTRACT_ADDRESS as string\n  );\n  return contract;\n};\n","import { PastEventOptions } from \"web3-eth-contract\";\nimport { getApiConnectedContract } from \"./getApiConnectedContract\";\n\nconst TOKENS_COUNT = 10000;\n\nconst getRandomNumber = (maxIncluded: number) => {\n  return Math.floor(Math.random() * (maxIncluded + 1));\n};\n\nexport const getRandomIDNotMintedNFT = async (): Promise<number | null> => {\n  const apiContract = await getApiConnectedContract();\n  if (apiContract === null) {\n    return null;\n  }\n\n  const tokensLeft = new Set<number>([...Array(TOKENS_COUNT).keys()]);\n\n  apiContract\n    .getPastEvents(\"Transfer\", {\n      filter: {\n        _from: \"0x0000000000000000000000000000000000000000\",\n      },\n      fromBlock: 0,\n    } as PastEventOptions)\n    .then((events) => {\n      for (const event of events) {\n        tokensLeft.delete(event.returnValues.tokenId);\n      }\n    });\n\n  if (tokensLeft.size === 0) {\n    console.error(\"no tokens left\");\n    return null;\n  }\n\n  const setIdx = getRandomNumber(tokensLeft.size - 1);\n\n  return [...tokensLeft][setIdx];\n};\n","import { addOrReplaceNotification } from \"../Notifications/addOrReplaceNotification\";\nimport { NotificationType } from \"../Notifications/Notifications\";\nimport { NotificationsSetter } from \"../Notifications/NotificationsSetter\";\nimport { generateUUID } from \"../utils/generateUUID\";\nimport { Account } from \"./Account\";\nimport { askContractToMintNFT } from \"./askContractToMintNFT\";\nimport { connectWallet } from \"./connectWallet\";\nimport { getContractThroughEthereumProvider } from \"./getContractThroughEthereumProvider\";\nimport { getRandomIDNotMintedNFT } from \"./getRandomIDNotMintedNFT\";\n\nconst isNonNegativeInteger = (str: string) => {\n  return /^([1-9]\\d*|0)$/.test(str);\n};\n\nexport const mintNFT = async ({\n  currentAccount,\n  setCurrentAccount,\n  tokenID,\n  setNotifications,\n}: {\n  currentAccount: Account;\n  setCurrentAccount: (acc: Account) => void;\n  tokenID: string;\n  setNotifications: NotificationsSetter;\n}): Promise<boolean> => {\n  let acc: Account | undefined = currentAccount;\n\n  const notificationID: string = generateUUID();\n\n  if (!acc) {\n    acc = await connectWallet({ setCurrentAccount });\n    if (!acc) {\n      addOrReplaceNotification({\n        newNotification: { type: NotificationType.Error, id: notificationID },\n        setNotifications,\n      });\n      return false;\n    }\n  }\n\n  addOrReplaceNotification({\n    newNotification: { type: NotificationType.MintPending, id: notificationID },\n    setNotifications,\n  });\n\n  const connectedContract = await getContractThroughEthereumProvider();\n  if (!connectedContract) {\n    addOrReplaceNotification({\n      newNotification: { type: NotificationType.Error, id: notificationID },\n      setNotifications,\n    });\n    return false;\n  }\n\n  let nonEmptyTokenID: number;\n  if (tokenID === \"\") {\n    const result = await getRandomIDNotMintedNFT();\n    if (result === null) {\n      addOrReplaceNotification({\n        newNotification: { type: NotificationType.Error, id: notificationID },\n        setNotifications,\n      });\n      return false;\n    }\n    nonEmptyTokenID = result;\n  } else {\n    tokenID = tokenID.trim();\n    if (!isNonNegativeInteger(tokenID)) {\n      console.error(\"only non-negative integers are allowed\");\n      addOrReplaceNotification({\n        newNotification: { type: NotificationType.Error, id: notificationID },\n        setNotifications,\n      });\n      return false;\n    }\n\n    nonEmptyTokenID = parseInt(tokenID);\n  }\n\n  return askContractToMintNFT({\n    tokenID: nonEmptyTokenID,\n    setNotifications,\n    notificationID,\n  });\n};\n","/* eslint-disable */\nexport function generateUUID() {\n  return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>\n    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Footer } from \"./Footer/Footer\";\nimport { Main } from \"./Main/Main\";\nimport { Notification, Notifications } from \"./Notifications/Notifications\";\nimport { Roadmap } from \"./Roadmap/Roadmap\";\nimport { Showcase } from \"./Showcase/Showcase\";\nimport \"./styles/App.css\";\nimport { SectionMetaNinjaz } from \"./SectionMetaNinjaz/SectionMetaNinjaz\";\nimport { preloadImages } from \"./utils/preloadImages\";\nimport { Account } from \"./wallet/Account\";\nimport { checkIfWalletIsConnected } from \"./wallet/checkIfWalletIsConnected\";\nimport { mintNFT } from \"./wallet/mintNFT\";\nimport { SocialMediaButtons } from \"./SocialMediaButtons\";\n\nfunction App() {\n  const [currentAccount, setCurrentAccount] = useState<Account>(\"\");\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n\n  useEffect(() => {\n    checkIfWalletIsConnected({ setCurrentAccount });\n    // preloadImages(\n    //   ...[...Array(rowImgCount * showcaseRowsCount).keys()].map(\n    //     (n) => `/sp/${n}.png`\n    //   )\n    // );\n  }, []);\n\n  return (\n    <>\n      <div className=\"app\">\n        <SocialMediaButtons />\n        <Main\n          mintNFT={({ tokenID }: { tokenID: string }) =>\n            mintNFT({\n              currentAccount,\n              setCurrentAccount,\n              tokenID,\n              setNotifications,\n            })\n          }\n        />\n        <SectionMetaNinjaz />\n        <Roadmap />\n        <Showcase />\n      </div>\n      <Footer />\n      <Notifications\n        notifications={notifications}\n        setNotifications={setNotifications}\n      />\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/reset.css\";\nimport \"./styles/index.css\";\nimport \"./styles/fonts.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}